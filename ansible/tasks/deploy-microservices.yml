- name: Deploy microservices
  kubernetes.core.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: '{{ item.name }}'
        namespace: '{{ namespace }}'
      spec:
        replicas: '{{ item.replicas }}'
        selector:
          matchLabels:
            app: '{{ item.name }}'
        template:
          metadata:
            labels:
              app: '{{ item.name }}'
          spec:
            containers:
              - name: '{{ item.name }}'
                image: '{{ item.image }}'
                imagePullPolicy: Never
                ports:
                  - containerPort: '{{ item.port | default(3000) }}'
                env:
                  - name: DB_HOST
                    valueFrom:
                      configMapKeyRef:
                        name: app-config
                        key: DB_HOST
                  - name: DB_PORT
                    valueFrom:
                      configMapKeyRef:
                        name: app-config
                        key: DB_PORT
                  - name: DB_USERNAME
                    valueFrom:
                      configMapKeyRef:
                        name: app-config
                        key: DB_USERNAME
                  - name: DB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: app-secrets
                        key: DB_PASSWORD
                  - name: DB_NAME
                    valueFrom:
                      configMapKeyRef:
                        name: app-config
                        key: DB_NAME
                  - name: KAFKA_BROKERS
                    valueFrom:
                      configMapKeyRef:
                        name: app-config
                        key: KAFKA_BROKERS
                resources:
                  requests:
                    memory: "{{ item.name == 'order-gateway' and '256Mi' or '128Mi' }}"
                    cpu: "{{ item.name == 'order-gateway' and '250m' or '125m' }}"
                  limits:
                    memory: "{{ item.name == 'order-gateway' and '512Mi' or '256Mi' }}"
                    cpu: "{{ item.name == 'order-gateway' and '500m' or '250m' }}"
                livenessProbe:
                  httpGet:
                    path: "{{ item.name == 'order-gateway' and '/api' or '/health' }}"
                    port: '{{ item.port | default(3000) }}'
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: "{{ item.name == 'order-gateway' and '/api' or '/health' }}"
                    port: '{{ item.port | default(3000) }}'
                  initialDelaySeconds: 5
                  periodSeconds: 5
                when: item.name == 'order-gateway'
    state: present
    wait: true
    wait_condition:
      type: Available
      status: 'True'
    wait_timeout: 300
  loop: '{{ services }}'
